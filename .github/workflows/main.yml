

import React, { useState } from 'react';
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';

const initialTasks = [
  { id: '1', title: 'Task 1', description: 'Description 1', status: 'To Do' },
  { id: '2', title: 'Task 2', description: 'Description 2', status: 'In Progress' },
  { id: '3', title: 'Task 3', description: 'Description 3', status: 'Peer Review' },
  { id: '4', title: 'Task 4', description: 'Description 4', status: 'Done' }
];

const statuses = ['To Do', 'In Progress', 'Peer Review', 'Done'];

const KanbanBoard = () => {
  const [tasks, setTasks] = useState(initialTasks);
  const [search, setSearch] = useState('');

  // Handle drag-and-drop
  const onDragEnd = (result) => {
    if (!result.destination) return;

    const updatedTasks = [...tasks];
    const [movedTask] = updatedTasks.splice(result.source.index, 1);
    movedTask.status = result.destination.droppableId;
    updatedTasks.splice(result.destination.index, 0, movedTask);

    setTasks(updatedTasks);
  };

  // Filter tasks based on search
  const filteredTasks = tasks.filter(task =>
    task.title.toLowerCase().includes(search.toLowerCase())
  );

  return (
    <div style={{ display: 'flex', gap: '16px', padding: '16px' }}>
      <input
        type="text"
        placeholder="Search tasks..."
        value={search}
        onChange={(e) => setSearch(e.target.value)}
        style={{ marginBottom: '16px', padding: '8px', width: '100%' }}
      />
      
      <DragDropContext onDragEnd={onDragEnd}>
        {statuses.map((status) => (
          <Droppable key={status} droppableId={status}>
            {(provided) => (
              <div
                {...provided.droppableProps}
                ref={provided.innerRef}
                style={{
                  background: '#f4f4f4',
                  padding: '16px',
                  width: '250px',
                  minHeight: '400px',
                  borderRadius: '8px',
                  overflowY: 'auto'
                }}
              >
                <h3>{status}</h3>
                {filteredTasks
                  .filter(task => task.status === status)
                  .map((task, index) => (
                    <Draggable key={task.id} draggableId={task.id} index={index}>
                      {(provided) => (
                        <div
                          {...provided.draggableProps}
                          {...provided.dragHandleProps}
                          ref={provided.innerRef}
                          style={{
                            padding: '16px',
                            marginBottom: '8px',
                            background: '#fff',
                            borderRadius: '4px',
                            boxShadow: '0 1px 3px rgba(0,0,0,0.2)',
                            ...provided.draggableProps.style
                          }}
                        >
                          <strong>{task.title}</strong>
                          <p>{task.description}</p>
                        </div>
                      )}
                    </Draggable>
                  ))}
                {provided.placeholder}
              </div>
            )}
          </Droppable>
        ))}
      </DragDropContext>
    </div>
  );
};
